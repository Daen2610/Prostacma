/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import Clases.DisenoTabla;
import Clases.MyConnection;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
/**
 *
 * @author familiar
 */
public class Registros extends javax.swing.JFrame {
    private Color colorFondoNormal = new Color(220, 220, 220);
    private Color colorTextoNormal = new Color(51, 51, 51);
    private Color colorFondoHover = new Color(190, 190, 190);
    private Color colorTextoHover = Color.BLACK;
    private Border bordeNormal = new LineBorder(new Color(153, 153, 153), 1);
    private Border bordeHover = new LineBorder(new Color(102, 102, 102), 2);
    private Font fuenteBoton = new Font("Segoe UI", Font.BOLD, 16);
    /**
     * Creates new form Registros
     */
    public Registros() {
        initComponents();
         aplicarEstilos();
         aplicarEstilosBotones();
    }
    private void aplicarEstilos() {

    DisenoTabla.aplicarDisenoModerno(txtFolio);
    DisenoTabla.aplicarDisenoModerno(txtNumeroParte);
    DisenoTabla.aplicarDisenoModerno(txtPasoActual);
    DisenoTabla.aplicarDisenoModerno(txtProceso);
    DisenoTabla.aplicarDisenoModerno(txtTotalPiezas);
    DisenoTabla.aplicarDisenoModerno(txtPiezasRealizadas);
    DisenoTabla.aplicarDisenoModerno(txtPiezasNG);
    DisenoTabla.aplicarDisenoModerno(txtFecha);
    DisenoTabla.aplicarDisenoModerno(txtEstado);

    DisenoTabla.aplicarDisenoModerno(jButton1);
    DisenoTabla.aplicarDisenoModerno(jButton2);
    

    // Colorear los campos de Piezas Realizadas y Piezas NG
    DisenoTabla.colorearCamposPiezas(txtPiezasRealizadas, txtPiezasNG);

    // Colorear el campo de Estado inicialmente
    actualizarColorEstado();
    }

    private void actualizarColorEstado() {
        DisenoTabla.colorearCampoEstado(txtEstado);
    }
    private void aplicarEstilosBotones() {
        // Estilo para jButton1 (Consultar Catalogo)
        jButton1.setFont(fuenteBoton);

        jButton1.setForeground(colorTextoNormal);
        jButton1.setBorder(bordeNormal);
        jButton1.setFocusPainted(false);
        agregarEfectoHover(jButton1);
        
        // Estilo para jButton7 (Almacen de Materia Prima)
        jButton2.setFont(fuenteBoton);
        jButton2.setForeground(colorTextoNormal);
        jButton2.setBorder(bordeNormal);
        jButton2.setFocusPainted(false);
        agregarEfectoHover(jButton2);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtFolio = new javax.swing.JTextField();
        txtNumeroParte = new javax.swing.JTextField();
        txtPasoActual = new javax.swing.JTextField();
        txtProceso = new javax.swing.JTextField();
        txtTotalPiezas = new javax.swing.JTextField();
        txtPiezasRealizadas = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtPiezasNG = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        spinnerPiezasHechas = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        spinnerNG = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(77, 130, 188));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Registro de Produccion");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 6, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Folio:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 54, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Numero de Parte:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 125, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Paso Actual:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 165, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Proceso:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 205, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Total de Piezas:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 245, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Piezas Realizadas:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 285, -1, -1));
        jPanel1.add(txtFolio, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 54, 166, -1));

        txtNumeroParte.setEditable(false);
        jPanel1.add(txtNumeroParte, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 125, 192, -1));

        txtPasoActual.setEditable(false);
        jPanel1.add(txtPasoActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 165, 192, -1));

        txtProceso.setEditable(false);
        jPanel1.add(txtProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 205, 192, -1));

        txtTotalPiezas.setEditable(false);
        jPanel1.add(txtTotalPiezas, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 245, 192, -1));

        txtPiezasRealizadas.setEditable(false);
        jPanel1.add(txtPiezasRealizadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 285, 192, -1));

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Buscar");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(331, 49, 84, 32));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Piezas NG:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 325, -1, -1));

        txtPiezasNG.setEditable(false);
        txtPiezasNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPiezasNGActionPerformed(evt);
            }
        });
        jPanel1.add(txtPiezasNG, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 325, 192, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("------------------------------------------------------------------------------------------");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 93, 459, -1));

        jPanel2.setBackground(new java.awt.Color(0, 81, 135));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Piezas Producidas:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        spinnerPiezasHechas.setModel(new SpinnerNumberModel(0, 0, 10000, 1));
        jPanel2.add(spinnerPiezasHechas, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 143, -1));

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Registrar Avance");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 120, 46));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Fecha:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 171, -1, -1));

        txtFecha.setEditable(false);
        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });
        jPanel2.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 171, 147, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Estado:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 211, -1, -1));

        txtEstado.setEditable(false);
        txtEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEstadoActionPerformed(evt);
            }
        });
        jPanel2.add(txtEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 211, 147, -1));

        jButton3.setBackground(new java.awt.Color(255, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Salir");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(386, 215, 73, 34));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Piezas NG:");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));
        jPanel2.add(spinnerNG, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 143, -1));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("------------------------------------------------------------------------------------------");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 133, 453, -1));

        jButton4.setBackground(new java.awt.Color(255, 102, 102));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon("C:\\Users\\razie\\Downloads\\broom (1).png")); // NOI18N
        jButton4.setText(" Limpiar Campos");
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 170, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        buscarFolio();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        registrarAvanceConCambioParte();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void limpiarCampos() {
    spinnerPiezasHechas.setValue(0.0); 
    spinnerNG.setValue(0.0);
    }
    
    private void agregarEfectoHover(JButton boton) {
    // Guardar los valores originales
    Color colorFondoOriginal = boton.getBackground();
    Color colorTextoOriginal = boton.getForeground();
    Border bordeOriginal = boton.getBorder();
    
    boton.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseEntered(MouseEvent e) {
            boton.setBackground(colorFondoHover);
            boton.setForeground(colorTextoHover);
            boton.setBorder(bordeHover);
        }

        @Override
        public void mouseExited(MouseEvent e) {
            // Restaurar todos los valores originales
            boton.setBackground(colorFondoOriginal);
            boton.setForeground(colorTextoOriginal);
            boton.setBorder(bordeOriginal);
        }
    });
}
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        PanelPrincipal menu = new PanelPrincipal();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaActionPerformed

    private void txtEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEstadoActionPerformed

    private void txtPiezasNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPiezasNGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPiezasNGActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_jButton4ActionPerformed

// Métodos modificados con soporte para Partes_Relacionadas

private void buscarFolio() {
    String folio = txtFolio.getText().trim();
    try (Connection conn = MyConnection.getConnection()) {

        // 1. Buscar número de parte y total de piezas en retiros
        PreparedStatement ps1 = conn.prepareStatement(
            "SELECT numero_parte, total_piezas FROM retiros WHERE folio = ?"
        );
        ps1.setString(1, folio);
        ResultSet rs1 = ps1.executeQuery();

        if (!rs1.next()) {
            JOptionPane.showMessageDialog(this, "Folio no encontrado.");
            return;
        }

        String parteSub = rs1.getString("numero_parte");
        int totalPiezas = rs1.getInt("total_piezas");
        txtNumeroParte.setText(parteSub);
        txtTotalPiezas.setText(String.valueOf(totalPiezas));

        // 2. Verificar si es parte relacionada
        String partePrincipal = parteSub;
        PreparedStatement psPrincipal = conn.prepareStatement(
            "SELECT parte_principal FROM Partes_Relacionadas WHERE parte_sub = ?"
        );
        psPrincipal.setString(1, parteSub);
        ResultSet rsPrincipal = psPrincipal.executeQuery();
        if (rsPrincipal.next()) {
            partePrincipal = rsPrincipal.getString("parte_principal");
        }

        // 3. Buscar procesos
        PreparedStatement ps2 = conn.prepareStatement(
            "SELECT id, paso, proceso FROM Procesos " +
            "WHERE numero_parte IN (SELECT parte_sub FROM Partes_Relacionadas WHERE parte_principal = ?) " +
            "   OR numero_parte = ? " +
            "ORDER BY LENGTH(paso), paso"
        );
        ps2.setString(1, partePrincipal);
        ps2.setString(2, partePrincipal);
        ResultSet rs2 = ps2.executeQuery();

        List<Integer> pasos = new ArrayList<>();
        Map<Integer, String> pasoNombre = new HashMap<>();
        Map<Integer, String> pasoProceso = new HashMap<>();

        while (rs2.next()) {
            int id = rs2.getInt("id");
            pasos.add(id);
            pasoNombre.put(id, rs2.getString("paso"));
            pasoProceso.put(id, rs2.getString("proceso"));
        }

        if (pasos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay procesos definidos.");
            return;
        }

        // 4. Obtener seguimiento actual
        PreparedStatement ps3 = conn.prepareStatement(
            "SELECT s.id_proceso, s.piezas_completadas, s.piezas_ng, s.piezas_totales, s.fecha_inicio, p.paso, p.proceso " +
            "FROM Seguimiento s " +
            "JOIN Procesos p ON s.id_proceso = p.id " +
            "WHERE s.folio_rollo = ? " +
            "ORDER BY s.id_seguimiento DESC LIMIT 1"
        );
        ps3.setString(1, folio);
        ResultSet rs3 = ps3.executeQuery();

        if (rs3.next()) {
            int buenas = rs3.getInt("piezas_completadas");
            int ng = rs3.getInt("piezas_ng");
            Timestamp fecha = rs3.getTimestamp("fecha_inicio");
            String paso = rs3.getString("paso");
            String proceso = rs3.getString("proceso");

            int restantes = totalPiezas - (buenas + ng);
            restantes = Math.max(0, restantes);

            ((SpinnerNumberModel) spinnerPiezasHechas.getModel()).setMaximum(restantes);
            ((SpinnerNumberModel) spinnerNG.getModel()).setMaximum(restantes);

            if (restantes == 0) {
                spinnerPiezasHechas.setValue(0);
                spinnerNG.setValue(0);
            }

            txtPasoActual.setText(paso);
            txtProceso.setText(proceso);
            txtPiezasRealizadas.setText(String.valueOf(buenas));
            txtPiezasNG.setText(String.valueOf(ng));
            txtFecha.setText(fecha != null ? fecha.toString() : "-");
              
             txtEstado.setText((buenas + ng) >= totalPiezas ? "Completo" : "En proceso");
             actualizarColorEstado(); // Asegúrate de que esta línea esté aquí

        } else {
            // No hay seguimiento aún → primer paso
            int primerId = pasos.get(0);
            txtPasoActual.setText(pasoNombre.get(primerId));
            txtProceso.setText(pasoProceso.get(primerId));
            txtPiezasRealizadas.setText("0");
            txtPiezasNG.setText("0");
            txtFecha.setText("-");
            txtEstado.setText("Pendiente");

            ((SpinnerNumberModel) spinnerPiezasHechas.getModel()).setMaximum(totalPiezas);
            ((SpinnerNumberModel) spinnerNG.getModel()).setMaximum(totalPiezas);
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al buscar: " + ex.getMessage());
    }
}


public void registrarAvanceConCambioParte() {
    String folio = txtFolio.getText().trim();
    int piezasBuenas = (Integer) spinnerPiezasHechas.getValue();
    int piezasNG = (Integer) spinnerNG.getValue();

    if (piezasBuenas < 0 || piezasNG < 0 || (piezasBuenas + piezasNG == 0)) {
        JOptionPane.showMessageDialog(this, "Debes ingresar una cantidad válida de piezas buenas o NG.");
        return;
    }

    Connection conn = null;
    try {
        conn = MyConnection.getConnection();
        conn.setAutoCommit(false);

        PreparedStatement ps = conn.prepareStatement("""
            SELECT s.id_seguimiento, s.id_proceso, s.piezas_completadas, s.piezas_ng, s.piezas_totales,
                   p.paso, p.numero_parte
            FROM Seguimiento s
            JOIN Procesos p ON s.id_proceso = p.id
            WHERE s.folio_rollo = ?
            ORDER BY s.id_seguimiento DESC LIMIT 1
        """);
        ps.setString(1, folio);
        ResultSet rs = ps.executeQuery();

        if (!rs.next()) {
            JOptionPane.showMessageDialog(this, "No hay seguimiento iniciado para este folio.");
            return;
        }

        int idSeg = rs.getInt("id_seguimiento");
        int buenasPrev = rs.getInt("piezas_completadas");
        int ngPrev = rs.getInt("piezas_ng");
        int total = rs.getInt("piezas_totales");
        String pasoActual = rs.getString("paso");
        String numeroParteActual = rs.getString("numero_parte");

        int nuevasBuenas = buenasPrev + piezasBuenas;
        int nuevasNG = ngPrev + piezasNG;

        if ((nuevasBuenas + nuevasNG) > total) {
            JOptionPane.showMessageDialog(this, "La suma de piezas excede el total permitido.");
            return;
        }

        // Actualizar el paso actual
        PreparedStatement updatePaso = conn.prepareStatement("""
            UPDATE Seguimiento SET piezas_completadas = ?, piezas_ng = ?, fecha_fin = ?, aceptado = ?
            WHERE id_seguimiento = ?
        """);
        updatePaso.setInt(1, nuevasBuenas);
        updatePaso.setInt(2, nuevasNG);
        updatePaso.setTimestamp(3, (nuevasBuenas + nuevasNG) >= total ? new Timestamp(System.currentTimeMillis()) : null);
        updatePaso.setBoolean(4, (nuevasBuenas + nuevasNG) >= total);
        updatePaso.setInt(5, idSeg);
        updatePaso.executeUpdate();

// Si se completó el paso, buscar el siguiente
if ((nuevasBuenas + nuevasNG) >= total) {
    String partePrincipal = numeroParteActual;
    boolean esSubparte = false;

    // Buscar parte principal si es una subparte
    PreparedStatement psPrincipal = conn.prepareStatement("""
        SELECT parte_principal FROM Partes_Relacionadas WHERE parte_sub = ?
    """);
    psPrincipal.setString(1, numeroParteActual);
    ResultSet rsPrincipal = psPrincipal.executeQuery();
    if (rsPrincipal.next()) {
        partePrincipal = rsPrincipal.getString("parte_principal");
        esSubparte = true;
    }

    // Buscar siguiente proceso para la parte principal
    PreparedStatement psNext = conn.prepareStatement("""
        SELECT p.id, p.numero_parte FROM Procesos p
        WHERE p.numero_parte = ?
        AND (CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(p.paso, '-', 1), ' ', -1) AS UNSIGNED) >
             CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(?, '-', 1), ' ', -1) AS UNSIGNED))
        ORDER BY CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(p.paso, '-', 1), ' ', -1) AS UNSIGNED)
        LIMIT 1
    """);
    psNext.setString(1, partePrincipal);
    psNext.setString(2, pasoActual);
    ResultSet rsNext = psNext.executeQuery();

    if (rsNext.next()) {
        int siguienteId = rsNext.getInt("id");
        String siguienteParte = rsNext.getString("numero_parte");
        int piezasFinales = total;

        // Comparar pesos y ajustar piezas si aplica (ahora con la parte principal)
        BigDecimal pesoActual = getPesoBlank(numeroParteActual, conn);
        BigDecimal pesoSiguiente = getPesoBlank(siguienteParte, conn);

        if (pesoActual != null && pesoSiguiente != null && esSubparte) {
            int piezasCalculadas = (int) Math.floor(pesoActual.doubleValue() / pesoSiguiente.doubleValue() * total);
            int piezasWIP = total - piezasCalculadas;

            if (piezasWIP > 0) {
                PreparedStatement psWip = conn.prepareStatement("""
                    INSERT INTO WIP (numero_parte, cantidad, origen_folio, destino_paso)
                    VALUES (?, ?, ?, ?)
                """);
                psWip.setString(1, numeroParteActual);
                psWip.setInt(2, piezasWIP);
                psWip.setString(3, folio);
                psWip.setInt(4, siguienteId);
                psWip.executeUpdate();
            }
            piezasFinales = piezasCalculadas;
        }

        // Insertar el nuevo paso con la parte principal como número de parte
        PreparedStatement insert = conn.prepareStatement("""
            INSERT INTO Seguimiento (folio_rollo, id_proceso, piezas_totales)
            VALUES (?, ?, ?)
        """);
        insert.setString(1, folio);
        insert.setInt(2, siguienteId);
        insert.setInt(3, piezasFinales);
        insert.executeUpdate();

        // Actualizar el número de parte en la tabla retiros (ahora con la parte principal)
        PreparedStatement psUpdateParte = conn.prepareStatement("""
            UPDATE retiros SET numero_parte = ? WHERE folio = ?
        """);
        psUpdateParte.setString(1, siguienteParte);
        psUpdateParte.setString(2, folio);
        psUpdateParte.executeUpdate();

        conn.commit();
        JOptionPane.showMessageDialog(this, "Paso completado. Siguiente paso iniciado con el número de parte: " + siguienteParte);
    } else {
        conn.commit();
        JOptionPane.showMessageDialog(this, "¡Último paso completado para este número de parte!");
    }

} else {
    conn.commit();
    JOptionPane.showMessageDialog(this, "Avance registrado correctamente.");
}

        buscarFolio(); // Refresca GUI

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error al registrar: " + ex.getMessage());
        if (conn != null) {
            try {
                conn.rollback();
            } catch (SQLException rollbackEx) {
                JOptionPane.showMessageDialog(this, "Error al hacer rollback: " + rollbackEx.getMessage());
            }
        }
    } finally {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cerrar la conexión: " + e.getMessage());
        }
    }
}

// Método auxiliar
private BigDecimal getPesoBlank(String parte, Connection conn) throws SQLException {
    try (PreparedStatement ps = conn.prepareStatement("SELECT Peso_Blank FROM Registros WHERE Numero_Parte = ?")) {
        ps.setString(1, parte);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return rs.getBigDecimal("Peso_Blank");
            }
        }
    }
    return null;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner spinnerNG;
    private javax.swing.JSpinner spinnerPiezasHechas;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFolio;
    private javax.swing.JTextField txtNumeroParte;
    private javax.swing.JTextField txtPasoActual;
    private javax.swing.JTextField txtPiezasNG;
    private javax.swing.JTextField txtPiezasRealizadas;
    private javax.swing.JTextField txtProceso;
    private javax.swing.JTextField txtTotalPiezas;
    // End of variables declaration//GEN-END:variables
}
